version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network

  kafka-server:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-server
    container_name: kafka-server
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-network
    depends_on:
      - zookeeper

  minecraft:
    # Container Image on dockerhub 
    image: itzg/minecraft-server
    tty: true
    stdin_open: true
    # Port Mappings
    ports:
      - "25565:25565"
      - "19565:19565" # prometheus port
    # Environment Variables
    env_file: .env # stores minecraft environment variables
    environment:
      EULA: "TRUE"
    volumes:
      - minecraft_data:/minecraft_logs
      - ./mods:/data/mods
      - ${PWD}/server/minecraft_server.1.20.1.jar:/data #if for whatever reason ${PWD} doesn't work, change ${PWD} to . for the relative directory
      #Can be commented out if yyou dont need persistent storage of MC data
      - type: bind
        source: C:\Users\Humberto\Documents\mc_data_LIVE #Working on a better fix here 
        target: /data
    #Don't remove but if you need you can adjust this if its overloading your system
    deploy:
      resources:
        limits:
          cpus: "2" #Allows number of cores in terms of cpu time 
          memory: "2g"
    networks:
      my-network:
        aliases:
          - minecraft

  kafka-producer:
    build: ./mc_producer
    container_name: kafka-producer-mc
    working_dir: /app
    volumes:
      - minecraft_data:/minecraft_logs
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
    networks:
      - my-network
    depends_on:
      - kafka-server
      - minecraft

  syntheticmetrics: #python synthetic metrics for rule testing
    build: ./synthetic_metrics_py
    container_name: synthetic_metrics
    working_dir: /app
    ports:
      - "9999:9999"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
    networks:
      - my-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-proto
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --log.level=debug
    #NOT persistent on docker down you will loose all stats
    volumes:
    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    - ./prometheus/prometheus_alert_rules.yml:/etc/prometheus/alert_rules.yml
    networks:
      - my-network
    depends_on:
    - cadvisor

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - my-network

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor-proto
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: always
    networks:
      - my-network

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana-proto
    restart: unless-stopped
    ports:
     - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
      #is persistent so we dont loose dashboards we made
      - type: bind
        source: ./Grafana #Folder In Github Repo
        target: /var/lib/grafana
    networks:
      - my-network
    depends_on:
    - prometheus
  mongo1:
    image: mongo
    container_name: mongo1
    ports:
      - "27017:27017"
    networks:
      - my-network
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
  mysql:
    build: ./mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      - '3306:3306'

  mongo_sql_producer:
    build: ./mongo_sql_producer
    command: sh -c "sleep 10s ; python3 ./mongo_sql_producer.py"
    container_name: mongo_sql_producer
    working_dir: /app
    networks:
      - my-network
    depends_on:
      - kafka-server
      - minecraft
networks:
  my-network:
    driver: bridge

volumes:
  minecraft_data:
    driver: local
  grafana-storage: {}
  db_data: